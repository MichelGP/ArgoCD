---
apiVersion: v1
kind: Namespace
metadata:
  name: telegraf-external
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-config
  namespace: telegraf-external
data:
  telegraf.conf: |
    # =========================
    # ITHO -> Telegraf -> Mimir
    # =========================

    # 1) Simple numeric topic
    [[inputs.mqtt_consumer]]
      servers       = ["tcp://mqtt-broker-lb.telegraf-external.svc.cluster.local:1883"]
      topics        = ["itho/state"]
      qos           = 0
      client_id     = "telegraf-itho-num"
      name_override = "itho"
      topic_tag     = "topic"
      data_format   = "value"
      data_type     = "float"

    # 2) LWT string -> numeric (online=1, offline=0)
    [[inputs.mqtt_consumer]]
      servers       = ["tcp://mqtt-broker-lb.telegraf-external.svc.cluster.local:1883"]
      topics        = ["itho/lwt"]
      qos           = 0
      client_id     = "telegraf-itho-lwt"
      name_override = "itho"
      topic_tag     = "topic"
      data_format   = "value"
      data_type     = "string"

    [[processors.enum]]
      namepass = ["itho"]
      tagpass  = { topic = ["itho/lwt"] }
      [[processors.enum.mapping]]
        field   = "value"
        dest    = "value"
        default = 0
        [processors.enum.mapping.value_mappings]
          online  = 1
          Online  = 1
          ONLINE  = 1
          offline = 0
          Offline = 0
          OFFLINE = 0

    # 3) lastcmd JSON — grab timestamp (ignore strings)
    [[inputs.mqtt_consumer]]
      servers       = ["tcp://mqtt-broker-lb.telegraf-external.svc.cluster.local:1883"]
      topics        = ["itho/lastcmd"]
      qos           = 0
      client_id     = "telegraf-itho-lastcmd"
      name_override = "itho"
      topic_tag     = "topic"
      data_format   = "json_v2"

      [[inputs.mqtt_consumer.json_v2]]
        measurement_name = "itho"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "timestamp"
          type   = "int"
          rename = "lastcmd_timestamp"

    # 4) ithostatus JSON — map key metrics to clean names
    [[inputs.mqtt_consumer]]
      servers       = ["tcp://mqtt-broker-lb.telegraf-external.svc.cluster.local:1883"]
      topics        = ["itho/ithostatus"]
      qos           = 0
      client_id     = "telegraf-itho-status"
      name_override = "itho"
      topic_tag     = "topic"
      data_format   = "json_v2"

      [[inputs.mqtt_consumer.json_v2]]
        measurement_name = "itho"

        # ---- integers / flags
        [[inputs.mqtt_consumer.json_v2.field]]  # modes/status
          path   = "Operating mode"
          type   = "int"
          rename = "operating_mode"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Operating phase IBS"
          type   = "int"
          rename = "operating_phase_ibs"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Operating status"
          type   = "int"
          rename = "operating_status"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Setting"
          type   = "int"
          rename = "setting"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Error"
          type   = "int"
          rename = "error"

        # Flags (0/1)
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Status normal"
          type   = "int"
          rename = "status_normal"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Status high extractor hood"
          type   = "int"
          rename = "status_high_extractor_hood"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Status high bathroom"
          type   = "int"
          rename = "status_high_bathroom"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Status timer"
          type   = "int"
          rename = "status_timer"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Status manual control"
          type   = "int"
          rename = "status_manual_control"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Status eco comfort"
          type   = "int"
          rename = "status_eco_comfort"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Status limited ventilation"
          type   = "int"
          rename = "status_limited_ventilation"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Status not at home"
          type   = "int"
          rename = "status_not_at_home"

        # ---- RH (%)
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "RH bathroom 1 (%)"
          type   = "float"
          rename = "rh_bathroom1_pct"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "RH bathroom 2 (%)"
          type   = "float"
          rename = "rh_bathroom2_pct"

        # ---- Fan / flaps / valves (%)
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "exhaust fan (%)"
          type   = "float"
          rename = "exhaust_fan_pct"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "calculated pos flap kitchen"
          type   = "float"
          rename = "pos_flap_kitchen_pct"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated pos flap toilet 1"
          type   = "float"
          rename = "pos_flap_toilet1_pct"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated pos flap living room 1"
          type   = "float"
          rename = "pos_flap_living_room1_pct"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated pos flap living room 2"
          type   = "float"
          rename = "pos_flap_living_room2_pct"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated pos flap laundry room"
          type   = "float"
          rename = "pos_flap_laundry_room_pct"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated pos flap bathroom1"
          type   = "float"
          rename = "pos_flap_bathroom1_pct"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated pos valve bath2+toilet2"
          type   = "float"
          rename = "pos_valve_bath2_toilet2_pct"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated pos valve bedroom1"
          type   = "float"
          rename = "pos_valve_bedroom1_pct"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated pos flap bedroom 2"
          type   = "float"
          rename = "pos_flap_bedroom2_pct"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated pos flap bedroom 3"
          type   = "float"
          rename = "pos_flap_bedroom3_pct"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated pos damper bedroom 4"
          type   = "float"
          rename = "pos_damper_bedroom4_pct"

        # ---- CO2 (ppm)
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "CO2 plenum (ppm)"
          type   = "float"
          rename = "co2_plenum_ppm"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated CO2 extractor (ppm)"
          type   = "float"
          rename = "co2_extractor_ppm"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated CO2 kitchen (ppm)"
          type   = "float"
          rename = "co2_kitchen_ppm"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated CO2 toilet1 (ppm)"
          type   = "float"
          rename = "co2_toilet1_ppm"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated CO2 living room 1 (ppm)"
          type   = "float"
          rename = "co2_living_room1_ppm"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated CO2 washroom (ppm)"
          type   = "float"
          rename = "co2_washroom_ppm"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated CO2 bathroom1 (ppm)"
          type   = "float"
          rename = "co2_bathroom1_ppm"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated CO2 bath2 + toilet2 (ppm)"
          type   = "float"
          rename = "co2_bath2_toilet2_ppm"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated CO2 bedroom 1 (ppm)"
          type   = "float"
          rename = "co2_bedroom1_ppm"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated CO2 bedroom 2 (ppm)"
          type   = "float"
          rename = "co2_bedroom2_ppm"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated CO2 bedroom 3 (ppm)"
          type   = "float"
          rename = "co2_bedroom3_ppm"

        # ---- Flows (m3/h)
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated Flow extractor hood (m3_h)"
          type   = "float"
          rename = "flow_extractor_hood_m3h"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated Flow kitchen (m3_h)"
          type   = "float"
          rename = "flow_kitchen_m3h"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated Flow toilet 1 (m3_h)"
          type   = "float"
          rename = "flow_toilet1_m3h"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated Flow living room 1 (m3_h)"
          type   = "float"
          rename = "flow_living_room1_m3h"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated Flow living room 2 (m3_h)"
          type   = "float"
          rename = "flow_living_room2_m3h"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated Flow laundry room (m3_h)"
          type   = "float"
          rename = "flow_laundry_room_m3h"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated Flow bathroom 1 (m3_h)"
          type   = "float"
          rename = "flow_bathroom1_m3h"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated Flow bath2+toilet2 (m3_h)"
          type   = "float"
          rename = "flow_bath2_toilet2_m3h"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated Flow bedroom1 (m3_h)"
          type   = "float"
          rename = "flow_bedroom1_m3h"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated Flow bedroom 2 (m3_h)"
          type   = "float"
          rename = "flow_bedroom2_m3h"
        [[inputs.mqtt_consumer.json_v2.field]]
          path   = "Calculated Flow bedroom 3 (m3_h)"
          type   = "float"
          rename = "flow_bedroom3_m3h"

    # =========================
    # P1 Monitor -> Mimir (MQTT)
    # =========================

    # 1) NUMERIC topics (parse as float; ints are fine too)
    [[inputs.mqtt_consumer]]
      servers       = ["tcp://mqtt-broker-lb.telegraf-external.svc.cluster.local:1883"]
      client_id     = "telegraf-p1-numeric"
      qos           = 0
      name_override = "p1monitor"
      topic_tag     = "topic"
      data_format   = "value"
      data_type     = "float"
      topics = [
        # smartmeter (live + totals)
        "p1monitor/smartmeter/timestamp_utc",
        "p1monitor/smartmeter/consumption_gas_m3",
        "p1monitor/smartmeter/consumption_kwh_high",
        "p1monitor/smartmeter/consumption_kwh_low",
        "p1monitor/smartmeter/consumption_kw",
        "p1monitor/smartmeter/production_kwh_high",
        "p1monitor/smartmeter/production_kwh_low",
        "p1monitor/smartmeter/production_kw",
        "p1monitor/smartmeter/record_is_processed",

        # per-phase
        "p1monitor/phase/timestamp_utc",
        "p1monitor/phase/consumption_l1_w",
        "p1monitor/phase/consumption_l2_w",
        "p1monitor/phase/consumption_l3_w",
        "p1monitor/phase/production_l1_w",
        "p1monitor/phase/production_l2_w",
        "p1monitor/phase/production_l3_w",
        "p1monitor/phase/l1_v",
        "p1monitor/phase/l2_v",
        "p1monitor/phase/l3_v",
        "p1monitor/phase/l1_a",
        "p1monitor/phase/l2_a",
        "p1monitor/phase/l3_a",

        # power/gas daily aggregates
        "p1monitor/powergas/day/timestamp_utc",
        "p1monitor/powergas/day/consumption_kwh_low",
        "p1monitor/powergas/day/consumption_kwh_high",
        "p1monitor/powergas/day/production_kwh_low",
        "p1monitor/powergas/day/production_kwh_high",
        "p1monitor/powergas/day/consumption_delta_kwh",
        "p1monitor/powergas/day/production_delta_kwh",
        "p1monitor/powergas/day/consumption_gas_m3",
        "p1monitor/powergas/day/consumption_gas_delta_m3",

        # power production (minute)
        "p1monitor/powerproduction/minute/timestamp_utc",
        "p1monitor/powerproduction/minute/production_kwh_high",
        "p1monitor/powerproduction/minute/production_kwh_high_total",
        "p1monitor/powerproduction/minute/production_kwh_low",
        "p1monitor/powerproduction/minute/production_kwh_low_total",
        "p1monitor/powerproduction/minute/production_kwh_total",
        "p1monitor/powerproduction/minute/production_pseudo_w",
        "p1monitor/powerproduction/minute/puls_per_timeunit_high",
        "p1monitor/powerproduction/minute/puls_per_timeunit_low",

        # watermeter (day + minute)
        "p1monitor/watermeter/day/timestamp_utc",
        "p1monitor/watermeter/day/watermeter_consumption_liter",
        "p1monitor/watermeter/day/watermeter_consumption_total_m3",
        "p1monitor/watermeter/day/watermeter_puls_count",
        "p1monitor/watermeter/minute/timestamp_utc",
        "p1monitor/watermeter/minute/watermeter_consumption_liter",
        "p1monitor/watermeter/minute/watermeter_consumption_total_m3",
        "p1monitor/watermeter/minute/watermeter_puls_count",

        # indoor temperature (numeric only)
        "p1monitor/indoor/temperature/timestamp_utc",
        "p1monitor/indoor/temperature/room_temperature_in_average",
        "p1monitor/indoor/temperature/room_temperature_in_high",
        "p1monitor/indoor/temperature/room_temperature_in_low",
        "p1monitor/indoor/temperature/room_temperature_out_average",
        "p1monitor/indoor/temperature/room_temperature_out_high",
        "p1monitor/indoor/temperature/room_temperature_out_low",

        # financial (numeric only)
        "p1monitor/financial/day/consumption_cost_electricity_high",
        "p1monitor/financial/day/consumption_cost_electricity_low",
        "p1monitor/financial/day/consumption_cost_gas",
        "p1monitor/financial/day/consumption_cost_water",
        "p1monitor/financial/day/production_revenues_electricity_high",
        "p1monitor/financial/day/production_revenues_electricity_low",
        "p1monitor/financial/day/timestamp_utc",

        # weather (numeric only)
        "p1monitor/weather/timestamp_utc",
        "p1monitor/weather/clouds",
        "p1monitor/weather/humidity",
        "p1monitor/weather/pressure",
        "p1monitor/weather/temperature",
        "p1monitor/weather/wind_degrees",
        "p1monitor/weather/wind_speed",
        "p1monitor/weather/city_id",
        "p1monitor/weather/weather_id"
      ]

    # 2) tarifcode is a string — read it separately and map to a number
    [[inputs.mqtt_consumer]]
      servers       = ["tcp://mqtt-broker-lb.telegraf-external.svc.cluster.local:1883"]
      client_id     = "telegraf-p1-tarif"
      qos           = 0
      name_override = "p1monitor"
      topic_tag     = "topic"
      data_format   = "value"
      data_type     = "string"
      topics        = ["p1monitor/smartmeter/tarifcode"]

    [[processors.enum]]
      namepass = ["p1monitor"]
      tagpass  = { topic = ["p1monitor/smartmeter/tarifcode"] }
      [[processors.enum.mapping]]
        field   = "value"
        dest    = "value"   # overwrite with numeric
        default = 0
        [processors.enum.mapping.value_mappings]
          P = 1
          1 = 1
          2 = 2

    # ---------- OUTPUT: Mimir (Prometheus remote_write over HTTP) ----------
    [[outputs.http]]
      url = "http://mimir-nginx.mimir.svc:80/api/v1/push"
      method = "POST"
      data_format = "prometheusremotewrite"

      [outputs.http.headers]
        Content-Type = "application/x-protobuf"
        Content-Encoding = "snappy"
        X-Prometheus-Remote-Write-Version = "0.1.0"
        X-Scope-OrgID = "fire"

    [[outputs.health]]
      service_address = "http://:1337"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: telegraf-deployment
  namespace: telegraf-external
spec:
  replicas: 1
  selector:
    matchLabels:
      app: telegraf-external
  template:
    metadata:
      labels:
        app: telegraf-external
    spec:
      containers:
        - name: telegraf
          image: telegraf:1.36.2-alpine
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          ports:
            - name: 8125-udp
              protocol: UDP
              containerPort: 8125
            - name: 8092-udp
              protocol: UDP
              containerPort: 8092
            - name: 8094-tcp
              protocol: TCP
              containerPort: 8094
            - name: health
              containerPort: 1337
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: /etc/telegraf
              readOnly: true
          livenessProbe:
            httpGet:
              path: /health
              port: 1337
            initialDelaySeconds: 10
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /health
              port: 1337
            initialDelaySeconds: 5
            periodSeconds: 10
      volumes:
        - name: config
          configMap:
            name: telegraf-config
            items:
              - key: telegraf.conf
                path: telegraf.conf
---
apiVersion: v1
kind: Service
metadata:
  name: telegraf-lb
  namespace: telegraf-external
spec:
  type: LoadBalancer
  loadBalancerIP: 192.168.50.159 # fix the IP
  selector:
    app: telegraf-external
  ports:
    - name: 8125-udp
      port: 8125
      targetPort: 8125
    - name: 8092-udp
      port: 8092
      targetPort: 8092
    - name: 8094-tcp
      port: 8094
      targetPort: 8094
    - name: health
      port: 1337
      targetPort: 1337
      protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mqtt-broker
  namespace: telegraf-external
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mqtt-broker
  template:
    metadata:
      labels:
        app: mqtt-broker
    spec:
      containers:
        - name: mosquitto
          image: eclipse-mosquitto:2.0.22
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"
          ports:
            - containerPort: 1883
              name: mqtt
          livenessProbe:
            tcpSocket:
              port: mqtt # 1883
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 2
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: mqtt # 1883
            initialDelaySeconds: 3
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3
          volumeMounts:
            - name: mosquitto-config
              mountPath: /mosquitto/config
      volumes:
        - name: mosquitto-config
          configMap:
            name: mosquitto-config
---
apiVersion: v1
kind: Service
metadata:
  name: mqtt-broker-lb
  namespace: telegraf-external
spec:
  type: LoadBalancer
  loadBalancerIP: 192.168.50.158 # fix the IP
  selector:
    app: mqtt-broker
  ports:
    - name: mqtt
      port: 1883
      targetPort: 1883
      protocol: TCP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mosquitto-config
  namespace: telegraf-external
data:
  mosquitto.conf: |
    listener 1883
    allow_anonymous true
