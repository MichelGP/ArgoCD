---
apiVersion: v1
kind: Namespace
metadata:
  name: telegraf-external
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-config
  namespace: telegraf-external
data:
  telegraf.conf: |
    # =============================
    # MQTT P1 Monitor -> Mimir
    # =============================
    [[inputs.mqtt_consumer]]
      servers     = ["tcp://mqtt-broker.telegraf-external.svc.cluster.local:1883"]
      topics      = ["p1monitor/#"]
      qos         = 0
      client_id   = "telegraf-p1"
      topic_tag   = "topic"          # keep full MQTT topic as a label
      data_format = "value"          # every payload is a single value
      data_type   = "string"         # parse as string first; convert below
      name_override = "p1monitor"

    # ---- Drop non-metric string timestamps ----
    [[processors.filter]]
      namepass = ["p1monitor"]
      tagdrop  = { topic = [
        "p1monitor/smartmeter/timestamp_local",
        "p1monitor/powergas/day/timestamp_local",
        "p1monitor/phase/timestamp_local"
      ] }

    # ---- Convert integers ----
    [[processors.converter]]
      namepass = ["p1monitor"]
      tagpass  = { topic = [
        "p1monitor/smartmeter/timestamp_utc",
        "p1monitor/smartmeter/record_is_processed",
        "p1monitor/powergas/day/timestamp_utc",
        "p1monitor/phase/timestamp_utc"
      ] }
      [processors.converter.fields]
        integer = ["value"]

    # ---- Convert floats (kWh/kW/W/m3/V/A and deltas) ----
    [[processors.converter]]
      namepass = ["p1monitor"]
      tagpass  = { topic = [
        # smartmeter totals/instantaneous
        "p1monitor/smartmeter/consumption_gas_m3",
        "p1monitor/smartmeter/consumption_kwh_high",
        "p1monitor/smartmeter/consumption_kwh_low",
        "p1monitor/smartmeter/consumption_kw",
        "p1monitor/smartmeter/production_kwh_high",
        "p1monitor/smartmeter/production_kwh_low",
        "p1monitor/smartmeter/production_kw",
        # day aggregates
        "p1monitor/powergas/day/consumption_kwh_low",
        "p1monitor/powergas/day/consumption_kwh_high",
        "p1monitor/powergas/day/production_kwh_low",
        "p1monitor/powergas/day/production_kwh_high",
        "p1monitor/powergas/day/consumption_delta_kwh",
        "p1monitor/powergas/day/production_delta_kwh",
        "p1monitor/powergas/day/consumption_gas_m3",
        "p1monitor/powergas/day/consumption_gas_delta_m3",
        # per-phase metrics (W, V, A)
        "p1monitor/phase/consumption_l1_w",
        "p1monitor/phase/consumption_l2_w",
        "p1monitor/phase/consumption_l3_w",
        "p1monitor/phase/production_l1_w",
        "p1monitor/phase/production_l2_w",
        "p1monitor/phase/production_l3_w",
        "p1monitor/phase/l1_v",
        "p1monitor/phase/l2_v",
        "p1monitor/phase/l3_v",
        "p1monitor/phase/l1_a",
        "p1monitor/phase/l2_a",
        "p1monitor/phase/l3_a"
      ] }
      [processors.converter.fields]
        float = ["value"]

    # ---- Map tarifcode string -> numeric (e.g., P=1). Overwrite "value" ----
    [[processors.enum]]
      namepass = ["p1monitor"]
      tagpass  = { topic = ["p1monitor/smartmeter/tarifcode"] }
      [[processors.enum.mapping]]
        field   = "value"
        dest    = "value"
        default = 0
        [processors.enum.mapping.value_mappings]
          P = 1
          1 = 1
          2 = 2

    # ---------- OUTPUT: Mimir (Prometheus remote_write over HTTP) ----------
    [[outputs.http]]
      url = "http://mimir-nginx.mimir.svc:80/api/v1/push"
      method = "POST"
      data_format = "prometheusremotewrite"

      [outputs.http.headers]
        Content-Type = "application/x-protobuf"
        Content-Encoding = "snappy"
        X-Prometheus-Remote-Write-Version = "0.1.0"
        X-Scope-OrgID = "fire"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: telegraf-deployment
  namespace: telegraf-external
spec:
  replicas: 1
  selector:
    matchLabels:
      app: telegraf-external
  template:
    metadata:
      labels:
        app: telegraf-external
    spec:
      containers:
        - name: telegraf
          image: telegraf:1.36.2-alpine
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          ports:
            - name: 8125-udp
              protocol: UDP
              containerPort: 8125
            - name: 8092-udp
              protocol: UDP
              containerPort: 8092
            - name: 8094-tcp
              protocol: TCP
              containerPort: 8094
          volumeMounts:
            - name: config
              mountPath: /etc/telegraf
              readOnly: true
          livenessProbe:
            tcpSocket: { port: 8094 }
            initialDelaySeconds: 10
            periodSeconds: 20
      volumes:
        - name: config
          configMap:
            name: telegraf-config
            items:
              - key: telegraf.conf
                path: telegraf.conf
---
apiVersion: v1
kind: Service
metadata:
  name: telegraf-service
  namespace: telegraf-external
spec:
  type: LoadBalancer
  selector:
    app: telegraf-external
  ports:
    - name: 8125-udp
      port: 8125
      targetPort: 8125
    - name: 8092-udp
      port: 8092
      targetPort: 8092
    - name: 8094-tcp
      port: 8094
      targetPort: 8094
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mqtt-broker
  namespace: telegraf-external
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mqtt-broker
  template:
    metadata:
      labels:
        app: mqtt-broker
    spec:
      containers:
        - name: mosquitto
          image: eclipse-mosquitto:2.0.22
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"
          ports:
            - containerPort: 1883
              name: mqtt
          volumeMounts:
            - name: mosquitto-config
              mountPath: /mosquitto/config
      volumes:
        - name: mosquitto-config
          configMap:
            name: mosquitto-config
---
apiVersion: v1
kind: Service
metadata:
  name: mqtt-broker-lb
  namespace: telegraf-external
spec:
  type: LoadBalancer
  selector:
    app: mqtt-broker
  ports:
    - name: mqtt
      port: 1883
      targetPort: 1883
      protocol: TCP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mosquitto-config
  namespace: telegraf-external
data:
  mosquitto.conf: |
    listener 1883
    allow_anonymous true
