---
apiVersion: v1
kind: Namespace
metadata:
  name: telegraf-external
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-config
  namespace: telegraf-external
data:
  telegraf.conf: |
    # ===== Telegraf: MQTT -> Mimir (Prometheus remote_write) =====

    [agent]
      interval = "10s"
      flush_interval = "10s"
      round_interval = true

    # ---------- INPUT: MQTT ----------
    # Subscribes to topics and parses JSON payloads into metrics.
    [[inputs.mqtt_consumer]]
      servers = ["tcp://telegrafExternal:1883"] 
      topics  = ["p1monitor/#"]
      qos = 0
      connection_timeout = "30s"
      client_id = "telegraf-mqtt"

      # If your broker needs auth:
      username = "Scone2194"
      password = "mMF$v9$$4jkedM"

      # Parse JSON payloads (works great for IoT messages)
      data_format = "json_v2"

      ## Example JSON mapping (adapt to your payload structure):
      ## {
      ##   "device":"kitchen",
      ##   "temp_c":22.7,
      ##   "humidity":45.1
      ## }
      [[inputs.mqtt_consumer.json_v2]]
        measurement_name = "mqtt_sensor"

        # Put fields into Prometheus samples
        [[inputs.mqtt_consumer.json_v2.object]]
          path = ""
          time_key = ""           # set if your JSON contains a timestamp
          tags = ["device"]       # JSON keys to turn into tags
          fields = [
            { path = "temp_c",    type = "float" },
            { path = "humidity",  type = "float" }
          ]

    [[outputs.http]]
      url = "http://mimir-nginx.mimir.svc:80/api/v1/push"
      method = "POST"
      data_format = "prometheusremotewrite"

      [outputs.http.headers]
        Content-Type = "application/x-protobuf"
        Content-Encoding = "snappy"
        X-Prometheus-Remote-Write-Version = "0.1.0"
        X-Scope-OrgID = "fire"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: telegraf-deployment
  namespace: telegraf-external
spec:
  replicas: 1
  selector:
    matchLabels:
      app: telegraf-external
  template:
    metadata:
      labels:
        app: telegraf-external
    spec:
      containers:
        - name: telegraf
          image: telegraf:1.36.2-alpine
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"
          ports:
            - name: 8125-udp
              protocol: UDP
              containerPort: 8125
            - name: 8092-udp
              protocol: UDP
              containerPort: 8092
            - name: 8094-tcp
              protocol: TCP
              containerPort: 8094
            - name: 1883-tcp
              protocol: TCP
              containerPort: 1883
          volumeMounts:
            - name: config
              mountPath: /etc/telegraf
              readOnly: true
          livenessProbe:
            tcpSocket: { port: 8094 }
            initialDelaySeconds: 10
            periodSeconds: 20
      volumes:
        - name: config
          configMap:
            name: telegraf-config
            items:
              - key: telegraf.conf
                path: telegraf.conf
---
apiVersion: v1
kind: Service
metadata:
  name: telegraf-service
  namespace: telegraf-external
spec:
  type: LoadBalancer
  selector:
    app: telegraf-external
  ports:
    - name: 8125-udp
      port: 8125
      targetPort: 8125
    - name: 8092-udp
      port: 8092
      targetPort: 8092
    - name: 8094-tcp
      port: 8094
      targetPort: 8094
    - name: 1883-tcp
      port: 1883
      targetPort: 1883