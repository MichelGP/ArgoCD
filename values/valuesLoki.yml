# https://github.com/grafana/loki/blob/main/production/helm/loki/distributed-values.yaml
# for chart: https://github.com/grafana/loki/tree/main/production/helm/loki

nodePools:
  controlPlane: &controlPlaneSelector
    node-role.kubernetes.io/control-plane: "true"
  logsIngest: &logsIngestSelector
    logs: "ingest"
  metricsHot: &metricsHotSelector
    metrics: "hot"
  tracesHot: &tracesHotSelector
    traces: "hot"
  queryCpu: &queryCpuSelector
    query: "cpu"
  general: &generalSelector
    general: "true"
  tierMinio: &minioSelector
    tier: "minio"

# Loki runtime config
loki:
  schemaConfig:
    configs:
      - from: "2024-04-01"
        store: tsdb
        object_store: s3
        schema: v13
        index:
          prefix: loki_index_
          period: 24h

  commonConfig:
    replication_factor: 3

  # Enable Loki authentication (basic auth) and Multi-Tenancy
  # https://grafana.com/docs/loki/latest/operations/multi-tenancy/
  auth_enabled: true

  # Pattern ingester gives HTTP error 500?
  pattern_ingester:
    enabled: false
  
  # Configure limits
  limits_config:
    reject_old_samples: true
    reject_old_samples_max_age: 168h
    volume_enabled: true

  storage:
    type: s3
    bucketNames:
      chunks: loki-chunks
      ruler: loki-ruler
      admin: loki-admin
    s3:
      endpoint: https://minio-tenant-hl.minio-tenant.svc.cluster.local:9000
      accessKeyId: minio
      secretAccessKey: minio123
      s3ForcePathStyle: true
      insecure: false
      http_config:
        insecure_skip_verify: true

  ingester:
    chunk_encoding: snappy

  querier:
    max_concurrent: 2
    multi_tenant_queries_enabled: true # enable multi-tenant queries, works with auth_enabled=true

# Helm deployment mode
deploymentMode: Distributed

# Component deployment configurations
ingester:
  zoneAwareReplication:
    enabled: false
  #nodeSelector: *logsIngestSelector
  replicas: 3
  maxUnavailable: 1
  resources:
    requests:
      cpu: "500m"
      memory: "256Mi"
    limits:
      cpu: "1"
      memory: "1G"
  persistence:
    enabled: true
    inMemory: false
    claims:
      - name: data # staging area for chunks
        size: "10Gi"
        storageClass: nfs-csi-retain
        accessModes: ReadWriteOnce
      - name: wal # write-ahead log
        size: "10Gi"
        storageClass: nfs-csi-retain
        accessModes: ReadWriteOnce
        
querier:
  replicas: 3
  maxUnavailable: 1
  #nodeSelector: *queryCpuSelector
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "1000m"
      memory: "512Mi"

queryFrontend:
  replicas: 2
  maxUnavailable: 1
  #nodeSelector: *queryCpuSelector
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"

queryScheduler:
  replicas: 1
  #nodeSelector: *logsIngestSelector
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "256Mi"

distributor:
  replicas: 1
  maxUnavailable: 1
  #nodeSelector: *logsIngestSelector
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "256Mi"

compactor:
  replicas: 1
  #nodeSelector: *logsIngestSelector
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "256Mi"

indexGateway:
  replicas: 1
  maxUnavailable: 1
  #nodeSelector: *logsIngestSelector
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "256Mi"

# Experimental bloom components
bloomPlanner:
  replicas: 0
bloomBuilder:
  replicas: 0
bloomGateway:
  replicas: 0

# Disable legacy deployment modes (this is for monolithic deployment)
backend:
  replicas: 0
read:
  replicas: 0
write:
  replicas: 0
singleBinary:
  replicas: 0

# Loki Gateway service
gateway:
  #nodeSelector: *logsIngestSelector
  service:
    type: LoadBalancer

resultsCache:
  #nodeSelector: *queryCpuSelector
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "256Mi"
  
chunksCache:
  #nodeSelector: *queryCpuSelector
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "1000m"
      memory: "1024Mi"

lokiCanary:
  enabled: true
  #nodeSelector: *queryCpuSelector