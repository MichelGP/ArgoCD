# Create the namespace
---
apiVersion: v1
kind: Namespace
metadata:
  name: n8n

# Persistent Volume Claim for n8n data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: n8n-claim0
  namespace: n8n
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: nfs-csi

# Persistent Volume Claim for PostgreSQL data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-claim0
  namespace: n8n
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: nfs-csi

# ConfigMap for PostgreSQL configuration (e.g., database name and user)
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: n8n
data:
  POSTGRES_DB: n8n
  POSTGRES_USER: n8n

# Secret for PostgreSQL password (base64 encoded "password" as an example)
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: n8n
type: Opaque
data:
  POSTGRES_PASSWORD: cGFzc3dvcmQ=

# Deployment for PostgreSQL
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: n8n
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:12
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            cpu: "200m"
            memory: "1024Mi"
          limits:
            cpu: "500m"
            memory: "2048Mi"
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-claim0

# Service for PostgreSQL
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: n8n
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres
  type: ClusterIP

# Deployment for n8n
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: n8n
  namespace: n8n
spec:
  replicas: 1
  selector:
    matchLabels:
      app: n8n
  template:
    metadata:
      labels:
        app: n8n
    spec:
      initContainers:
        - name: fix-perms
          image: busybox:1.36
          command: ["/bin/sh","-c"]
          args:
            - |
              set -eux
              mkdir -p /home/node/.n8n
              chown -R 1000:1000 /home/node/.n8n
              chmod -R 600 /home/node/.n8n
          securityContext:
            runAsUser: 0   # run this iniContainer as root
          volumeMounts:
            - name: n8n-data
              mountPath: /home/node/.n8n
      containers:
      - name: n8n
        image: n8nio/n8n:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5678
        env:
        - name: DB_TYPE
          value: postgresdb
        - name: DB_POSTGRESDB_HOST
          value: postgres
        - name: DB_POSTGRESDB_PORT
          value: "5432"
        - name: DB_POSTGRESDB_DATABASE
          value: n8n
        - name: DB_POSTGRESDB_USER
          value: n8n
        - name: DB_POSTGRESDB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: WEBHOOK_URL
          value: "https://n8n.greypixel.nl"
        - name: N8N_LICENSE_ACTIVATION_KEY
          value: "87a9ea3f-ef87-49d2-95b6-bcb7106a548a"
        - name: N8N_RUNNERS_ENABLED
          value: "true"
        - name: N8N_BLOCK_ENV_ACCESS_IN_NODE
          value: "false"         
        volumeMounts:
        - name: n8n-data
          mountPath: /home/node/.n8n
        resources:
          requests:
            cpu: "200m"
            memory: "1024Mi"
          limits:
            cpu: "500m"
            memory: "2048Mi"
      volumes:
      - name: n8n-data
        persistentVolumeClaim:
          claimName: n8n-claim0

# Service for n8n (Using ClusterIP with Ingress)
---
apiVersion: v1
kind: Service
metadata:
  name: n8n
  namespace: n8n
spec:
  ports:
  - port: 5678
    targetPort: 5678
  selector:
    app: n8n
  type: ClusterIP