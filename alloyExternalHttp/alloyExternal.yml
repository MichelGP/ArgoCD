---
apiVersion: v1
kind: Namespace
metadata:
  name: alloy-external
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: alloy-external
data:
  alloy.hcl: |
    otelcol.receiver.otlp "receiver" {
      http {
        // Preserve metadata / headers (we need x-scope-orgid for multi-tenancy)
        include_metadata = true
      }        
      grpc {
        // Preserve metadata / headers (we need x-scope-orgid for multi-tenancy)
        include_metadata = true
      }

      output {
        metrics = [otelcol.processor.memory_limiter.default.input]
        logs    = [otelcol.processor.memory_limiter.default.input]
        traces  = [otelcol.processor.memory_limiter.default.input]
      }
    }

    otelcol.processor.memory_limiter "default" {
      check_interval = "1s"
      limit          = "1024MiB"
      spike_limit    = "512MiB"
      output {
        metrics = [otelcol.processor.batch.default.input]
        logs    = [otelcol.processor.batch.default.input]
        traces  = [otelcol.processor.batch.default.input]
      }
    }

    otelcol.processor.batch "default" {
      send_batch_size     = 1024
      send_batch_max_size = 2048
      timeout             = "5s"

      // Preserve x-scope-orgid
      metadata_keys = ["x-scope-orgid"]

      output {
        metrics = [otelcol.exporter.otlphttp.mimir_incluster.input]
        logs    = [otelcol.exporter.otlphttp.loki_incluster.input] 
        traces  = [otelcol.exporter.otlphttp.tempo_incluster.input]
      }
    }

    // Set the x-scope-orgid header for multi-tenancy.
    otelcol.auth.headers "creds" {
      header {
        key          = "X-Scope-OrgID"
        from_context = "x-scope-orgid"
      }
    }

    otelcol.exporter.otlphttp "loki_incluster" {
      client {
        endpoint = "http://loki-distributor.loki.svc.cluster.local:3100/otlp"
        auth     = otelcol.auth.headers.creds.handler
      }
    }

    otelcol.exporter.otlphttp "mimir_incluster" {
      client {
        endpoint = "http://mimir-distributor.mimir.svc.cluster.local:8080/otlp"
        auth     = otelcol.auth.headers.creds.handler
      }
    }

    otelcol.exporter.otlphttp "tempo_incluster" {
      client {
        endpoint = "http://tempo-distributor.tempo.svc.cluster.local:4318"
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alloy-deployment
  namespace: alloy-external
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alloy
  template:
    metadata:
      labels:
        app: alloy
    spec:
      containers:
        - name: alloy
          image: grafana/alloy:latest
          args:
            - "run"
            - "/etc/alloy/alloy.hcl"
          ports:
            - name: http2-otlp
              containerPort: 4318
          volumeMounts:
            - name: config
              mountPath: /etc/alloy
              readOnly: true
          livenessProbe:
            tcpSocket: { port: 4318 }
            initialDelaySeconds: 10
            periodSeconds: 20
      volumes:
        - name: config
          configMap:
            name: alloy-config
            items:
              - key: alloy.hcl
                path: alloy.hcl
---
apiVersion: v1
kind: Service
metadata:
  name: alloy-service
  namespace: alloy-external
spec:
  type: LoadBalancer
  selector:
    app: alloy
  ports:
    - name: http2-otlp
      port: 4318
      targetPort: http2-otlp